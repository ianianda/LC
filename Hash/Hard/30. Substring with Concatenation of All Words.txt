// Key: using two hashmap

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res = new ArrayList<Integer>();
        if(s==null||s.length()==0) return res;
        int wordNum=words.length;
        if (wordNum==0) return res;
        
        int wordLen = words[0].length();
    
        HashMap<String, Integer> allWords = new HashMap<String, Integer>();
        /* allWords: to store all the target words*/
        for (String w : words) {
            allWords.put(w, allWords.getOrDefault(w,0)+1);
        }
        
        // key: the range of i
        for (int i=0; i<s.length()-wordNum*wordLen+1; i++) {
            HashMap<String, Integer> hasWords = new HashMap<String, Integer>();
            int num = 0;
            /* start from the first word in the words*/
            while (num < wordNum) {
                /* each word in the s */
                String word=s.substring(i+num*wordLen, i+(num+1)*wordLen);
                
                /* if words contains the word */
                if (allWords.containsKey(word)) {
                    /* if it has, put the word into hasWords and count it */
                    hasWords.put(word,hasWords.getOrDefault(word,0)+1);
                    /* if word's frequency > target frequency */
                    if(hasWords.get(word)>allWords.get(word)){
                        break;
                    }
                } else { /* if words do not contain the word */
                    break;
                }
                // when hitting the break, it will be here.
                //System.out.println(num);
                ++num;
            }
            //System.out.println("here");
            if (num==wordNum) {
                res.add(i);
            }
        }
        return res;
    }
}