O(n)>O(nlogn)
//O(n)
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set1=new HashSet<>();
        Set<Integer> res=new HashSet<>();
        for(int i=0;i<nums2.length;i++){
            set1.add(nums2[i]);
        }
        for(int i=0;i<nums1.length;i++){
            if(set1.contains(nums1[i])){
                res.add(nums1[i]);
            }
        }
        int size=res.size(), i=0;
        int[] res2=new int[size];
        for(Integer n:res){
            res2[i++]=n;
        }
        return res2;
    }
}

//O(nlogn)
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                set.add(nums1[i]);
                i++;
                j++;
            }
        }
        int[] result = new int[set.size()];
        int k = 0;
        for (Integer num : set) {
            result[k++] = num;
        }
        return result;
    }
}
