The important thing is to consider all edge cases while thinking this problem through, including: negative integer, possible overflow, etc.

Use HashMap to store a remainder and its associated index while doing the division so that whenever a same remainder comes up, we know there is a repeating fractional part.

class Solution {
    public String fractionToDecimal(int n, int d) {
        if(d==0||n==0) return "0";
        StringBuilder sb = new StringBuilder();
        
        //check the result if it is >0 or <0
        sb.append(((n > 0) ^ (d > 0)) ? "-" : ""); //IMPORTANT
        //tt-f
        //tf-t
        //ft-t
        //ff-f
        
        long num = Math.abs((long)n);
        long den = Math.abs((long)d);
        
        sb.append(num/den);
        num%=den; //.xxxxx part
        if(num==0) return sb.toString();
        
        sb.append(".");
        
        HashMap<Long,Integer> map=new HashMap<>();
        map.put(num,sb.length());
        while(num!=0){
            num*=10;
            sb.append(num/den);
            num%=den;
            if(map.containsKey(num)){
                int index=map.get(num);
                sb.insert(index,"(");
                sb.append(")");
                break;
            }else{
                map.put(num,sb.length());
            }
        }
        return sb.toString();
    }
}