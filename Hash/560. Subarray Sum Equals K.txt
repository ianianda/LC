class Solution {
    int res=0;
    public int subarraySum(int[] nums, int k) {
        if(nums==null||nums.length==0) return 0;
        int sum=0;
        for(int i=0;i<nums.length;i++){
            helper(nums,k,i,0);        
        }
        return res;
    }
    private void helper(int[] nums,int k,int i, int sum){
        while(sum<k&&i<nums.length){ //has error
            sum+=nums[i];
            System.out.println("here");
            i++;
        }
        if(sum==k){
            System.out.println(i);
            System.out.println(k);
            System.out.println(sum);
            res++;
        }
    }
}

//IMPROVED:
//pre store pre-sum in a hashtable.
class Solution {
    public int subarraySum(int[] nums, int k) {
        if(nums==null||nums.length==0) return 0;
        int sum=0,result=0;
        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);
        
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            if(preSum.containsKey(sum)){
                result+=preSum.get(sum-k);
            }
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        return result;
    }
}