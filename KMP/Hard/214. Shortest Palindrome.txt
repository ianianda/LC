For example, if s is "abacbbcda", so the longest palindromic prefix substring is "aba"(not "cbbc" because it's not prefix string), and the remaining substring is "cbbcda", we reverse the remaining substring and get "adcbbc", so the result is "adcbbc" + "abacbbcda".

int len = s.length();
		if (len < 2)
			return s;
		// calculate the length of the longest palindromic prefix substring.
		int longest = 1, start, end;
		for (int begin = 0; begin <= len / 2;) {
			start = end = begin;
			while (end < len - 1 && s[end + 1] == s[end])
				++end;
			begin = end + 1;
			while (end < len - 1 && start > 0 && s[end + 1] == s[start - 1]) {
				++end;
				--start;
			}
			// start == 0 means the palindromic substring is also prefix string.
			if (start == 0 && longest < end - start + 1)
				longest = end - start + 1;
		}
		// reverse the remaining substring and adding it in front of s.
		std::string remaining = s.substr(longest, len - longest);
		std::reverse(remaining.begin(), remaining.end());
		return remaining + s;