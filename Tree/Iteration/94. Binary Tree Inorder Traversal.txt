// didnt think of using two while loops instead of else-if with single while.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> list=new ArrayList();
        Stack<TreeNode> st=new Stack();
        if(root==null) return list;
        TreeNode cur=root; //get a pointer to root.!!!!!!!!!!!!!!!!
        
        while(cur!=null||!st.empty()){
            while(cur!=null){
                st.add(cur);
                cur=cur.left;
            }
            //when left is empty,the outside while loop only runs from here!!!!!!!!!!
            cur=st.pop();
            list.add(cur.val);
            cur=cur.right;
        }
        return list;
    }
}