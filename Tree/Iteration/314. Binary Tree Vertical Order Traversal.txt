/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        
        Map<Integer,ArrayList<Integer>> map = new HashMap<>();
        /* store nodes */
        Queue<TreeNode> q = new LinkedList<>();
        Queue<Integer> cols = new LinkedList<>();
        
        q.add(root);
        cols.add(0);
        int min=0, max=0;
        
        //IMPORTANT: using a number to record the position the node belongs to
        while(!q.isEmpty()){
            TreeNode node = q.poll(); //2
            int col = cols.poll(); //-1
            
            if(!map.containsKey(col)){
                map.put(col,new ArrayList<Integer>()); //0{},-1{}
            }
            map.get(col).add(node.val); //0{1};-1{2}
            
            if(node.left!=null){
                q.add(node.left); //q:3,4
                cols.add(col-1); //cols:-2
                min=Math.min(min,col-1); //min:-2
            }
            
            if(node.right!=null){ 
                q.add(node.right); //q:3,4,5
                cols.add(col+1); //cols:1,-1
                max=Math.max(max,col+1); //max:1
            }
        }
        for(int i=min;i<=max;i++){
            res.add(map.get(i));
        }
        return res;
    } 
}