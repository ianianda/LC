/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null) return null;
        Map<TreeNode,TreeNode> parent = new HashMap<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        parent.put(root,null);
        stack.push(root);
        
        // when p or q not in the map
        while(!parent.containsKey(p)||!parent.containsKey(q)){
            TreeNode node = stack.pop();
            
            if(node.left!=null){
                parent.put(node.left,node);
                stack.push(node.left);
            }
            if(node.right!=null){
                parent.put(node.right,node);
                stack.push(node.right);
            }
        }
        
        Set<TreeNode> ancestors = new HashSet<>();
        while(p!=null){
            ancestors.add(p); // now have all the roots of p
            p=parent.get(p); 
        }
        
        // have not found q
        while(!ancestors.contains(q)){ // found the root of q
            q=parent.get(q); //2 5  
        }
        return q;
    }
}