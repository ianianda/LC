//KEY:in-order traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode firstElement=null; // the bigger one needs to be swapped
    TreeNode secondElement=null; // the smaller one needs to be swapped
    TreeNode prevElement = new TreeNode(Integer.MIN_VALUE);
    
    public void recoverTree(TreeNode root) {
        traverse(root);
        
        //important: value can be swapped by just changing their values.
        int tmp = firstElement.val;
        firstElement.val=secondElement.val;
        secondElement.val=tmp;
        
    }
    private void traverse(TreeNode root){
        if(root==null) return;
        traverse(root.left);
        if(firstElement==null&&prevElement.val>=root.val){
            firstElement=prevElement;
        }
        if(firstElement!=null&&prevElement.val>=root.val){
            secondElement=root;
        }
        prevElement=root;
        traverse(root.right);
    }
}