class Solution {
    
    public static final int[][] dirs={{0,1},{1,0},{0,-1},{-1,0}};
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix==null||matrix.length==0) return 0;
        int m=matrix.length, n=matrix[0].length;
        int[][] cache=new int[m][n];
        int max=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int len=dfs(matrix,i,j,m,n,cache);
                max=Math.max(len,max);
            }
        }
        return max;
    }
    private int dfs(int[][] matrix, int i, int j,int m,int n,int[][] cache){
        //
        if(cache[i][j]!=0) return cache[i][j];
        int max=1;
        for(int[] dir:dirs){
            int x=i+dir[0], y=j+dir[1];
            if(x>=m||x<0||y>=n||y<0||matrix[x][y]<=matrix[i][j]) continue;
            int len=1+dfs(matrix,x,y,m,n,cache);//IMPORTANT
            max=Math.max(max,len);
        }
        cache[i][j]=max;
        return max;
    }
}