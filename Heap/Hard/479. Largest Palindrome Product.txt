class Solution {
    public int largestPalindrome(int n) {
    int max = (int)Math.pow(10, n) - 1;
    int min = max - (int)Math.pow(10, (n + 1) >> 1);
    	
    Comparator<int[]> cmp = new Comparator<int[]>() {
    	@Override
	public int compare(int[] a, int[] b) {
    	    return Long.compare((long)b[0] * b[1], (long)a[0] * a[1]);
    	}
    };
    	
    PriorityQueue<int[]> pq = new PriorityQueue<>(max - min, cmp);
    	
    for (int i = max; i > min; i--) {
    	int r = i % 10;
    		
    	if (r == 3 || r == 7) {
    	    pq.offer(new int[] {i, i});
    	} else if (r == 1) {
    	    pq.offer(new int[] {i, i - 2});
    	} else if (r == 9) {
    	    pq.offer(new int[] {i, i - 8});
    	}
    }
    	
    while (!pq.isEmpty()) {
    	int[] a = pq.poll();
    	long p = (long)a[0] * a[1];
    		
    	if (isPalindrome(p)) return (int)(p % 1337);
    		
    	if (a[1] > min) {
    	    a[1] -= 10;
    	    pq.offer(a);
    	}
    }
    
    return 0;
}
    
private boolean isPalindrome(long z) {
    long r = 0;
    for (long x = z; x != 0; r = r * 10 + x % 10, x /= 10);
    return r == z;
}
}