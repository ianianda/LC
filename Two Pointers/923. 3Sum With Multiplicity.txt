//TLE:
class Solution {
    public int threeSumMulti(int[] A, int target) {
        if(A==null||A.length==0) return 0;
        int res=0;
        for(int i=0;i<A.length;i++){
            res=helper(A,target-A[i],i+1,0);
        }
        return res;
        
    }
    
    private int helper(int[] A, int target, int i, int sum){
        int slow=i+1;
        int fast=i+2;
        int count=0;
        while(slow<A.length){
            sum=A[slow];
            while(fast<A.length){
                //System.out.println("here");
                if(sum>target||fast>=A.length||slow>=A.length) continue;
                sum+=A[fast];
                if(sum==target) ++count;
                sum-=A[fast];
                fast++;
            }
            slow++;
        }
        return count;
    }
}

//Improved:
//As requirement said:
// 3 <= A.length <= 3000, so N = 3000
// But 0 <= A[i] <= 100
//So solution is O(N + 101 * 101)

class Solution {
    public int threeSumMulti(int[] A, int target) {
        if(A==null||A.length==0) return 0;
        long[] c=new long[101];
        long res=0;
        //count occurence of each int.
        for(int a:A){
            c[a]++;
        }
        
        for(int i=0;i<=100;i++){
            for(int j=i;j<=100;j++){
                int k=target-i-j; // third one
                if(k>100||k<0) continue;
                if(i==j&&j==k){
                    //System.out.println("here");
                  res+=c[i]*(c[i]-1)*(c[i]-2)/6;  // C(2,3) -> filter out not asc order 
                }else if(i==j&&j!=k){
                    //System.out.println("here");
                  res+=(c[i]*(c[i]-1)/2)*c[k];
                }else if(i<j&&j<k){
                  //  System.out.println("here");
                  res+=c[i]*c[j]*c[k];
                }
                //System.out.println("here");
            }   
        }
        return (int)(res%(1e9+7));
    }
}