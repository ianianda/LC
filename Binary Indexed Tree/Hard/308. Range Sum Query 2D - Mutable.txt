class NumMatrix {

    int[][] tree;
    int[][] nums; // a copy of tree
    int m, n;
    
    public NumMatrix(int[][] matrix) {
        if(matrix==null||matrix.length==0) return;
        
        m = matrix.length;
        n = matrix[0].length;
        
        tree = new int[m+1][n+1];
        nums = new int[m][n];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                update(i,j,matrix[i][j]);
            }
        }
    }
    
    // time:O(n)
    public void update(int row, int col, int val) {
        if (m == 0 || n == 0 || row < 0 || row > m || col < 0 || col > n) return;
        
        int oldVal = nums[row][col];
        nums[row][col] = val;
        
        //IMPORTANT PART
        int delta = val-oldVal;
        for(int i =row+1;i<=m;i+=i&(-i)){
            for(int j=col+1;j<=n;j+=j&(-j)){
                tree[i][j]+=delta;
            }
        }
    }
    
    // time: O(1)
    public int sumRegion(int row1, int col1, int row2, int col2) {
        if (m == 0 || n == 0 || row1 < 0 || row1 > m || col1 < 0 || col1 > n || row2 < 0 || row2 > m || col2 < 0 || col2 > n) { 
            return 0; 
        }
        return sum(row2, col2) + sum(row1 - 1, col1 - 1) - sum(row1 - 1, col2) - sum(row2, col1 - 1);

    }
    
    public int sum(int row, int col) {
        // remember tree is indexed by rLen & cLen, off-by-one index
        int rLen = row + 1;
        int cLen = col + 1;
        int sum = 0;
        for (int i = rLen; i > 0; i -= i & (-i)) {
            for (int j = cLen; j > 0; j -= j & (-j)) {
                sum += tree[i][j];
            }
        }
        return sum;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */