public static int shipWithinDays(int[] weights, int D) {
		int res=0,sum=0,avg=0;
		if(weights==null||weights.length==0) return res;
		Arrays.sort(weights);
		for(int c:weights) {
			sum+=c;
		}
		avg=sum/D;
		int index=0;
		res=helper(weights,0,D,avg,index);
		
		return res;
        
    }
	public static int helper(int[] weights, int sum, int D, int avg, int index) {
		if(index==weights.length) return sum;
		for(int i=index;i<weights.length;i++) {
			if() D--;
			helper(weights,sum+weights[i],D,avg,i+1);
		}
		return sum;
	}
//IMPROVED:
class Solution {
    public int shipWithinDays(int[] weights, int D) {
        int left = 0, right = 0;
        for (int w: weights) {
            left = Math.max(left, w);//single item -> max.
            right += w;//total.
        }
        while (left < right) {
            int mid = (left + right) / 2, need = 1, cur = 0;
            for (int w: weights) {
                if (cur + w > mid) {
                    need += 1;
                    cur = 0;
                }
                cur += w;
            }
            if (need > D) left = mid + 1;
            else right = mid;
        }
        return left;
    }
}