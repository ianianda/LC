class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        
        vector<int> parents(edges.size()+1,0);//0 means do not have parents.
        vector<int> sizes(edges.size()+1,1);// every set is individual, size is 1.
        
        for(const auto& edge: edges){//dealing with each edge
            int u = edge[0];
            int v = edge[1];
            if(!parents[u]) parents[u] = u;
            if(!parents[v]) parents[v] = v;
            
            // find root
            int pu = find(u, parents);
            int pv = find(v, parents);
            
            // if they have the same root, which means they are in the same tree
            if(pu==pv) return edge;
            
            if(sizes[pv]>sizes[pu]){
                swap(pu,pv);
            }
            parents[pv]=pu;
            sizes[pu]+=sizes[pv];
        }
        return {};
    }
    
private:
    int find(int node, vector<int>& parents){
        while(parents[node]!=node){
            parents[node]=parents[parents[node]];
            node=parents[node];
        }
        return node;
    }
};