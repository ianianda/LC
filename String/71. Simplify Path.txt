class Solution {
    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();
        //-------important---------
        Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
        //-------important---------
        for (String dir : path.split("/")) {
            if (dir.equals("..") && !stack.isEmpty()) stack.pop();
            else if (!skip.contains(dir)) stack.push(dir);
        }
        String res = "";
        for (String dir : stack) res = "/" + dir + res;
        return res.isEmpty() ? "/" : res;
    }
}

//diff. btw queue v.s. deque:
//Deque is short for "double ended queue". With an ordinary queue, you add things to one end and take them from the other. With a double ended queue, you can add things to either end, and take them from either end. That makes it a bit more versatile; for example, you could use it as a stack if you wanted to.
//Application for priority queue:https://www.geeksforgeeks.org/applications-priority-queue/
