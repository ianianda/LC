// KEY: The main idea is to maintain a sliding window with 2 unique characters. 
// The key is to store the last occurrence of each character as the value in the hashmap. 
// This way, whenever the size of the hashmap exceeds 2, we can traverse through the map to 
//   find the character with the left most index, and remove 1 character from our map. 
//   Since the range of characters is constrained, we should be able to find the left most 
//   index in constant time.



class Solution {
    int len=0;
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if(s==null||s.length()<1) return 0;
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        int low=0, high=0, maxLen=0;
        while(high<s.length()){
            if(map.size()<=2){
                char c = s.charAt(high);
                map.put(c, high);
                high++;
            }
            if(map.size()>2){
                int leftMost = s.length();
                for(int i: map.values()){
                    leftMost = Math.min(leftMost,i);
                }
                char c = s.charAt(leftMost);
                map.remove(c);
                low = leftMost+1;
            }
            maxLen=Math.max(maxLen,high-low);
        }
        return maxLen;
    }
}