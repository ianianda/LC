// key: differences between LinkedHashSet vs. HashSet
// I modified the code by replacing HashSet with LinkedHashSet because the set.iterator() might be costly when a number has too many duplicates. Using LinkedHashSet can be considered as O(1) if we only get the first element to remove.

class RandomizedCollection {

    ArrayList<Integer> nums;
    HashMap<Integer, Set<Integer>> locs;
    java.util.Random rand = new java.util.Random(); //IMPORTANT
    
    /** Initialize your data structure here. */
    public RandomizedCollection() {
        nums=new ArrayList<>();
        locs=new HashMap<>();
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    public boolean insert(int val) {
        boolean contain=locs.containsKey(val);
        if(contain==false){
            locs.put(val, new LinkedHashSet<Integer>());//IMPORTANT
        }
        locs.get(val).add(nums.size()); //IMPORTANT
        nums.add(val);
        
        return !contain;
    }
    
    //IMPORTANT FUNCTION
    /** Removes a value from the collection. 
    Returns true if the collection contained the specified element. */
    public boolean remove(int val) {
        boolean contain=locs.containsKey(val);
        if(contain==false){
            return false;
        }
        int loc=locs.get(val).iterator().next(); //IMPORTANT
        locs.get(val).remove(loc);
        
        // remove the val from nums arraylist.
        if(loc<nums.size()-1){
            int lastone=nums.get(nums.size()-1);
            nums.set(loc,lastone); //update: .set(int index, E element)
            locs.get(lastone).remove(nums.size()-1);
            locs.get(lastone).add(loc);
        }
        
        nums.remove(nums.size()-1);
        if(locs.get(val).isEmpty()) locs.remove(val);
        return true;
    }
    
    /** Get a random element from the collection. */
    public int getRandom() {
        return nums.get(rand.nextInt(nums.size()));
    }
}

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */