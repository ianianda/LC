/* The key observation is that in order to win Tic-Tac-Toe you must have the entire row or column.  
   model transformation: grab the core of the question, and then change it into a simpler theory.

*/

class TicTacToe {

    // key: choose the proper ds to store the steps of both players.
    private int[] rows,cols;
    private int diagonal, anti_diagonal;
    
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        // n x n board
        if(n<=0) return;
        rows = new int[n];
        cols = new int[n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    //IMPORTANT
    public int move(int row, int col, int player) {
        int toAdd = player==1?1:-1; // -1 is important
        // count each row/col : 0 ~ 3, 3 means player 1 occupies the whole row/col
        rows[row]+=toAdd;
        cols[col]+=toAdd;
        if(row==col){
            diagonal+=toAdd;
        }
        if(col==(cols.length-row-1)){
            anti_diagonal+=toAdd;
        }
        int size= rows.length;
        if(Math.abs(rows[row])==size||Math.abs(cols[col])==size||Math.abs(diagonal)==size
           ||Math.abs(anti_diagonal)==size){
            return player;
        }
        return 0;
        
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */