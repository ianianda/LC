//TLE:
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> res = new ArrayList<>();
        if(arr==null||arr.length==0) return res;
        int start=0,end=arr.length-1,K=0,mid=0;
        if(x<arr[0]){
            while(k-->0){
                res.add(arr[K++]);
            }
            return res;
        }
        if(x>arr[end]){
            while(k-->0){
                res.add(arr[end--]);
            }
            return res;
        }
        
        while(start<=end){
            mid = start+(end-start)/2;
            if(arr[mid]==x){
                res.add(x);
                break;
            }
            else if(arr[mid]<x){
                start=mid;
            }else{
                end=mid;
            }
        }
        int cur=mid;
        while(--k>0){
            //System.out.println("k"+k+"mid"+mid);
            if(cur>0){
                res.add(arr[--cur]);
                //System.out.println("mid"+mid);
            }
            else{
                res.add(arr[++mid]);
                //System.out.println("mid"+mid);
            }
        }
        Collections.sort(res); 
        return res;
        
    }
}

//Improved:
Assume we are taking A[i] ~ A[i + k -1].
We can binary research i
We compare the distance between x - A[mid] and A[mid + k] - x

If x - A[mid] > A[mid + k] - x,
it means A[mid + 1] ~ A[mid + k] is better than A[mid] ~ A[mid + k - 1],
and we have mid smaller than the right i.
So assign left = mid + 1.

Time Complexity:
O(log(N - K)) to binary research and find reseult
O(K) to create the returned list.

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> res = new ArrayList<>();
        if(arr==null||arr.length==0) return res;
        
        int left=0,right=arr.length-k;//key: right
        while(left<right){
            int mid=left+(right-left)/2;
            if(x-arr[mid]>arr[mid+k]-x){
                left=mid+1;
            }else{
                right=mid;
            }
        }
        for(int i=0;i<k;i++){
            res.add(arr[left+i]);
        }
        return res;
    }
}