//O(n):
class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length==0) return false;
        int start = 0;
        int end = nums.length - 1;
        HashSet<Integer> hs=new HashSet<>();
        
        for(int i=0;i<nums.length;i++){
            hs.add(nums[i]);
            //System.out.println(i);
        }
        
        return hs.contains(target);
    }
}

//IMPROVED
class Solution(object):
    def search(self, nums, target):
        if not nums:
            return False
        low = 0
        high = len(nums) - 1
        while low <= high:
            while low < high and nums[low] == nums[high]:
                low += 1                  
            mid = (low+high)/2
            if target == nums[mid]:
                return True         
            elif nums[mid] >= nums[low]: 
                if nums[low] <= target < nums[mid]:  
                    high = mid - 1
                else:
                    low = mid + 1
            elif nums[mid] <= nums[high]: 
                if nums[mid] < target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1
        return False