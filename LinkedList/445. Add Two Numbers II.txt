//TOO LONG:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null&&l2==null) return null;
        ListNode<Integer> res = new ListNode<>();
        int len1=0, len2=0;
        ListNode head=l1;
        while(head!=null){
            ++len;
            head=head.next;
        }
        ListNode head=l2;
        while(head!=null){
            ++len2;
            head=head.next;
        }
        if(len1>len2){
            int diff=len1-len2;
            int sign=1;
        }else if(len1<len2){
            int diff=len2-len1;
            int sign=0;
        }else{
            int diff=0;
            int sign=3;
        }
        ListNode longer=null;
        ListNode shorter=null;
        if(sign==1){
            longer=l1;
            shorter=l2;
        }else if(sign==0){
            longer=l2;
            shorter=l1;
        }
        if(longer!=null){
            while(--diff>=0){
                res.add(longer.val);
                longer=longer.next;            
            }
            while(shorter!=null){
                int ret = longer.val+shorter.val;
                if(ret>=10){
                    int m = ret-10;
                }
                res.add(m);
            }
        }
    }
}

// Improved:
// both using stack:
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        
        while(l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        };
        while(l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        int sum = 0;
        ListNode list = new ListNode(0);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) sum += s1.pop();
            if (!s2.empty()) sum += s2.pop();
            //IMportant part
            list.val = sum % 10;
            ListNode head = new ListNode(sum / 10);
            head.next = list;
            list = head;
            sum /= 10;
        }
        return list.val == 0 ? list.next : list;
    }
}