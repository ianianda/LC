class Solution {
    private int die = 2;//why: 01
    private int live =3;//why: 11
    
    public void gameOfLife(int[][] board) {
        if(board==null||board.length==0) return;
        // 1 has neighbour < 11       --> 0
        //                 == 11||111 --> 1
        //                 > 111      --> 0
        // 0               == 111     --> 1
        int row=board.length, col=board[0].length;
        int[][] temp=new int[row][col];
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                int around = helper(board,i,j);
                if(board[i][j]==0&&around==3){
                    board[i][j]=live;//why not ==1?
                }else if(board[i][j]==1){
                    if(around==2||around==3){
                        continue;
                    }
                    if(around<2||around>3){
                        board[i][j]=die;//why not ==0?
                    }
                }
                //System.out.println(board[i][j]);
            }
            
        }
        
        // need to separate it, 
        // because if you update along with the first loops, 
        // you wont get the right count.
        for (int i=0;i<row;i++){
            for (int j=0;j<col;j++){
                 if (board[i][j] == die)
                     board[i][j] = 0;
                 if (board[i][j] == live)
                     board[i][j] = 1;
                }
            }
        
    }
    
    private int helper(int[][] board, int row, int col){
        int count=0;
        //if(row<=0||col<=0) return 0;
        int[][] dirs = {{1,0},{-1,0},
                        {0,1},{0,-1},
                        {-1,-1},{1,1},
                        {-1,1},{1,-1}};
        
        for(int[] dir:dirs){
            int x=row+dir[0];
            int y=col+dir[1];
            if(x>=0&&y>=0&&x<board.length&&y<board[0].length){
                if(board[x][y]==1||board[x][y]==die) count++;
            }
        }
        return count;
    }
}