just two numbers after several XOR,AND,OR,~, to get the result.

https://leetcode.com/problems/sum-of-two-integers/discuss/84278/A-summary:-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently


>> is arithmetic shift right, >>> is logical shift right.

In an arithmetic shift, the sign bit is extended to preserve the signedness of the number.

For example: -2 represented in 8 bits would be 11111110 (because the most significant bit has negative weight). Shifting it right one bit using arithmetic shift would give you 11111111, or -1. Logical right shift, however, does not care that the value could possibly represent a signed number; it simply moves everything to the right and fills in from the left with 0s. Shifting our -2 right one bit using logical shift would give 01111111.

-------------
unsign int range is larger than sign int
----------
11110001 
00000000 00000001 11111000
00000010 00000010 01111100
00000100 00000100 00111110
00001000 00001000 00011111
00010000 00010001 10001111
00100000 00100011 11000111
01000000 01000111 11100011
10000000 10001111 11110001
----------
Key: pay attention on overflow