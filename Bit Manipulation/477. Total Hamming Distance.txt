TLE:
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def helper(self, m,n):
            hamming_distance = 0
            s = str(bin(m^n))
            for i in range(2,len(s)):
                if int(s[i]) is 1:
                    hamming_distance += 1
            print hamming_distance
            return hamming_distance
        
        if nums is None or len(nums)<=1:
            return 0
        res = 0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                res+=helper(self,nums[i],nums[j])
        
        return res


//improved:
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #print sum(b.count('1') for b in zip(*map('{:032b}'.format, nums)))
        
        return sum(b.count('0') * b.count('1') for b in zip(*map('{:032b}'.format, nums)))