/** Solution: DP O(n^2)
 * sub-problem: dp[i] represents longest increasing subsequence from index 0 to i
 * base case: dp[i] = 1 for 0 < i < n - 1
 * recurrence relation: dp[i] = max(dp[i], dp[j] + 1) if nums[j] < nums[i], 0 < j < i
 * explanation: i - 1 is right boundary for current substring with length i, then we can have a moving pointer j,
 * scanning from 0 to i - 1, if nums[j] is less than i, then we can add nums[i] into increasing subsequence
 * between (0, i)
 * */
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums==null||nums.length==0) return 0;
        int[] dp=new int[nums.length];
        
        for(int i=0;i<nums.length;i++){
            dp[i]=1;
        }
        
        for(int i=1;i<nums.length;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i]=Math.max(dp[j]+1,dp[i]);
                }                
            }
        }
        int maxRes=0;
        for(int i=0;i<nums.length;i++){
            maxRes=Math.max(maxRes,dp[i]);
        }
        return maxRes;
    }
}