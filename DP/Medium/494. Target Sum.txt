This is a typical DP solution.

1.Pick a data structure(dictionary) dic: dic[i] = j denotes that with given target sum i, there are j ways reaching to it.

2. Maintain a pointer (from left to right), and this will update dic dynamically:

for i in range(1, len(nums)):
    tdic = {}
    for d in dic:
        tdic[d + nums[i]] = tdic.get(d + nums[i], 0) + dic.get(d, 0)
        tdic[d - nums[i]] = tdic.get(d - nums[i], 0) + dic.get(d, 0)

3. Don't forget to provide init value before the iteration:

dic = {nums[0]: 1, -nums[0]: 1} if nums[0] != 0 else {0: 2}

4. And corner cas:

if not nums:
    return 0

5.Return the result:

return dic.get(S, 0)

class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        if not nums:
            return 0
        # example: nums[0]=2, -nums[0]=-2
        dic = {nums[0]: 1, -nums[0]: 1} if nums[0] != 0 else {0: 2}
        for i in range(1, len(nums)):
            tdic = {}
            for d in dic:
                tdic[d + nums[i]] = tdic.get(d + nums[i], 0) + dic.get(d, 0)
                tdic[d - nums[i]] = tdic.get(d - nums[i], 0) + dic.get(d, 0)
            dic = tdic
        return dic.get(S, 0)