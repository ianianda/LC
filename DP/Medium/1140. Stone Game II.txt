from functools import lru_cache
class Solution:
    def stoneGameII(self, A: List[int]) -> int:
        N = len(A)
        for i in range(N-2,-1,-1): #range(start, stop, step)
            A[i]+=A[i+1]
        @lru_cache(None)  #otherwise we will get TLE  
        def dp(i,m):
            if i+2*m>=N: return A[i]
            return A[i]-min(dp(i+x,max(m,x)) for x in range(1,2*m+1)) #IMPORTANT
        
        return dp(0,1)