//VERY IMPORTANT:
For e.g. in case of the array [23,2,6,4,7] the running sum is [23,25,31,35,42] and the remainders are [5,1,1,5,0]. We got remainder 5 at index 0 and at index 3. That means, in between these two indexes we must have added a number which is multiple of the k. Hope this clarifies your doubt :)

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        if(nums==null||nums.length<=1) return false;
        boolean res=false;
        int curSum=0, n=nums.length;
        
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0,-1);
        for(int i=0;i<n;i++){
            curSum+=nums[i];
            if(k!=0) curSum=curSum%k; //curSum = remainder
            if(map.containsKey(curSum)){
                if(i-map.get(curSum)>1) return true; //i-(index of existing remainder)
            }else{
                map.put(curSum,i);
            }
        }
        return false;   
    }
}