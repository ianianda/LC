//have bug:
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null||matrix.length==0) return 0;
        int r=matrix.length, c=matrix[0].length;
        int[][] dp = new int[r+1][c+1];
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(matrix[i][j]==1){
                    dp[i+1][j+1]=matrix[i][j-1]+1;
                }else{
                    dp[i+1][j+1]=0;
                }
            }
        }
        
        System.out.println(Arrays.toString(dp));
        
        int[] width=new int[r+1];
        for(int i=0;i<r+1;i++){
            width[i]=dp[i][c];
        }
        
        int[][] dp2 = new int[width.length+1][width.length+1];
        for(int i=0;i<width.length;i++){
            for(int j=0;j<width.length;j++){
                if(width[i]<=width[j]) dp2[i][j]+=width[i];
            }
        }
        int[] res = new int[r+1];
        for(int i=0;i<r+1;i++){
            res[i]=dp2[r][width.length];
        }
        Arrays.sort(res);
        return res[res.length-1];
        
    }
}

//improved:
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null||matrix.length==0) return 0;
        int r=matrix.length, c=matrix[0].length;
        char[][] dp = new char[r][c];
        
        for(int i=0;i<r;i++){
            for(int j=1;j<c;j++){
                if(matrix[i][j]=='1'){
                    matrix[i][j]=(char)(matrix[i][j-1]+1);
                }else{
                    matrix[i][j]='0';
                }
            }
        }
        
        System.out.println(Arrays.deepToString(matrix));
        
        
        int max=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                int min=matrix[i][j]-'0'; // min = 1 or 0
                //important part
                if(min>0){
                    max=Math.max(max,min);
                    for(int k=i-1;k>=0&&matrix[k][j]!='0';k--){
                        min = Math.min(min, matrix[k][j] - '0');
                        max = Math.max(max, min * (i-k+1));
                    }
                }
            }
        }
        return max;
    }
}