//first, to see if the sum of the array can be divided by k. if not, return false.
class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum=0;//sum of the array.
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
        }
        if(k<=0||sum%k!=0) return false; // the sum of all elements cannot be divided by k.
        int[] visited=new int[nums.length];//create an array to record if the element is being visited.
        return helper(nums,visited,0,k,0,0,sum/k); //if can be divided into k subsets.
    }
    private boolean helper(int[] nums, int[] visited, int start_index, int k, int cur_sum, int cur_num, int target){
        if(k==1) return true; //base case: when k==1,all sets are in the same, so return true.
        if(cur_sum>target) return false;
        if(cur_sum==target&&cur_num>0) return helper(nums,visited,0,k-1,0,0,target);
        //if cur_sum<target:
        for(int i=start_index;i<nums.length;i++){
            if(visited[i]==0){
                visited[i]=1;
                if(helper(nums,visited,i+1,k,cur_sum+nums[i],cur_num++,target)) return true;
                visited[i]=0;
            }
        }
        return false;
    }
}