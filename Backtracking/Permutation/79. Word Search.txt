class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null||board.length==0||word==null||word.length()==0) return false;
        char[] w=word.toCharArray();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(helper(i,j,board,w,0)) return true;
            }
        }
        
        
        return false;
    }
    
    private boolean helper(int x, int y, char[][] board, char[] word, int n){
        //System.out.println(n);
        if(n==word.length){
          //System.out.println("here");
          return true;  
        } 
        if(x<0||y<0||x==board.length||y==board[0].length) return false;
        if(word[n]!=board[x][y]) return false;
        
        board[x][y] ^= 256;//IMPORTANT

        boolean res = helper(x+1,y,board,word,n+1)||helper(x-1,y,board,word,n+1)||helper(x,y-1,board,word,n+1)||helper(x,y+1,board,word,n+1);
        board[x][y] ^= 256;//IMPORTANT

        
        return res;
    }
}

it means when we search the board time and time again, in order to avoid repeat work, we need to mark the searched character, the naive solution is to create another boolean matrix, but it will costs a lot of space, if we do it with bit mask we can make the searched character to a special character, and when we search it again, it will never match any character we met before, which is another way to avoid repeat work. When we finish the search start from board[i][j] this time, in order to prepare for the next round search, we need to revel the mask, recover the character which is masked, so we do board[y][x] ^= 256 again.

