class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);//if we dont sort.
        helper(res,new ArrayList<>(),nums,0);
        return res;
    }
    //============important part====================
    private void helper(List<List<Integer>> res,List<Integer> temp,int[] nums,int index){
        res.add(new ArrayList<>(temp)); //get a node
        for(int i=index;i<nums.length;i++){
            temp.add(nums[i]);
            helper(res,temp,nums,i+1);
            temp.remove(temp.size()-1);
        }
    }
}

//Method2: bit operation
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        const int n=nums.size();
        vector<vector<int>> res;
        for(int s=0;s<1<<n;++s){
            vector<int> cur;
            for(int i=0;i<n;++i){
                if(s&(1<<i)) cur.push_back(nums[i]);
            }
            res.push_back(cur);
        }
        return res;
    }
};